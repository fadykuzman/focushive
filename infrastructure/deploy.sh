#!/bin/bash

# FocusHive Calendar Integration - Infrastructure Deployment Script
# Automates Google Cloud setup using Terraform/OpenTofu

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TERRAFORM_DIR="$SCRIPT_DIR"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if terraform or tofu is installed
    if command -v tofu &> /dev/null; then
        TERRAFORM_CMD="tofu"
        print_success "OpenTofu found: $(tofu version | head -n1)"
    elif command -v terraform &> /dev/null; then
        TERRAFORM_CMD="terraform"
        print_success "Terraform found: $(terraform version | head -n1)"
    else
        print_error "Neither OpenTofu nor Terraform is installed"
        echo "Install one of:"
        echo "  - OpenTofu: https://opentofu.org/docs/intro/install/"
        echo "  - Terraform: https://learn.hashicorp.com/tutorials/terraform/install-cli"
        exit 1
    fi
    
    # Check if gcloud is installed and authenticated
    if ! command -v gcloud &> /dev/null; then
        print_error "Google Cloud CLI (gcloud) is not installed"
        echo "Install it from: https://cloud.google.com/sdk/docs/install"
        exit 1
    fi
    
    # Check gcloud authentication
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -n1 &> /dev/null; then
        print_error "No active gcloud authentication found"
        echo "Run: gcloud auth login"
        exit 1
    fi
    
    ACTIVE_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -n1)
    print_success "Authenticated as: $ACTIVE_ACCOUNT"
    
    # Check if terraform.tfvars exists
    if [[ ! -f "$TERRAFORM_DIR/terraform.tfvars" ]]; then
        print_warning "terraform.tfvars not found"
        echo "Please create terraform.tfvars from terraform.tfvars.example"
        echo "cp $TERRAFORM_DIR/variables.tfvars.example $TERRAFORM_DIR/terraform.tfvars"
        echo "Then edit terraform.tfvars with your configuration"
        exit 1
    fi
    
    print_success "All prerequisites met"
}

# Function to initialize Terraform
init_terraform() {
    print_status "Initializing Terraform..."
    
    cd "$TERRAFORM_DIR"
    
    $TERRAFORM_CMD init
    
    print_success "Terraform initialized"
}

# Function to plan deployment
plan_deployment() {
    print_status "Planning deployment..."
    
    cd "$TERRAFORM_DIR"
    
    $TERRAFORM_CMD plan -out=tfplan
    
    print_success "Deployment plan created"
}

# Function to apply deployment
apply_deployment() {
    print_status "Applying deployment..."
    
    cd "$TERRAFORM_DIR"
    
    $TERRAFORM_CMD apply tfplan
    
    print_success "Infrastructure deployed"
}

# Function to extract outputs
extract_outputs() {
    print_status "Extracting deployment outputs..."
    
    cd "$TERRAFORM_DIR"
    
    PROJECT_ID=$($TERRAFORM_CMD output -raw project_id)
    
    print_success "Project ID: $PROJECT_ID"
    
    # Extract OAuth client ID if available
    if [[ -f "oauth_client_id.txt" ]]; then
        CLIENT_ID=$(cat oauth_client_id.txt)
        print_success "OAuth Client ID: $CLIENT_ID"
        
        # Create .env file for the application
        ENV_FILE="$PROJECT_ROOT/.env.local"
        
        print_status "Creating environment file: $ENV_FILE"
        
        cat > "$ENV_FILE" << EOF
# Google Calendar Integration Configuration
# Generated by infrastructure deployment

NEXT_PUBLIC_GOOGLE_CLIENT_ID=$CLIENT_ID
NEXT_PUBLIC_GOOGLE_REDIRECT_URI=http://localhost:3001/auth/callback
NEXT_PUBLIC_GOOGLE_SCOPES=https://www.googleapis.com/auth/calendar.events.readonly

# Production configuration (update domains as needed)
# NEXT_PUBLIC_GOOGLE_REDIRECT_URI=https://yourdomain.com/auth/callback
EOF
        
        print_success "Environment file created: $ENV_FILE"
    else
        print_warning "OAuth client ID not automatically created"
    fi
}

# Function to show manual steps
show_manual_steps() {
    print_status "Manual configuration steps required:"
    
    cd "$TERRAFORM_DIR"
    
    echo ""
    echo "1. Configure OAuth Client:"
    
    if [[ -f "update_oauth_client.sh" ]]; then
        print_status "Run the generated script:"
        echo "   ./update_oauth_client.sh"
        echo ""
    fi
    
    # Show Terraform outputs
    $TERRAFORM_CMD output next_steps
    
    echo ""
    echo "2. Test the integration:"
    echo "   cd $PROJECT_ROOT"
    echo "   npm run dev"
    echo "   Navigate to Settings â†’ Calendar Integration"
    
    echo ""
    print_success "Deployment completed! Follow the manual steps above to finish setup."
}

# Function to destroy infrastructure
destroy_infrastructure() {
    print_warning "This will destroy all created infrastructure!"
    read -p "Are you sure? Type 'yes' to confirm: " -r
    
    if [[ $REPLY == "yes" ]]; then
        cd "$TERRAFORM_DIR"
        $TERRAFORM_CMD destroy
        
        # Clean up generated files
        rm -f oauth_client_id.txt
        rm -f update_oauth_client.sh
        rm -f tfplan
        
        print_success "Infrastructure destroyed"
    else
        print_status "Destroy cancelled"
    fi
}

# Function to show status
show_status() {
    cd "$TERRAFORM_DIR"
    
    if [[ -f "terraform.tfstate" ]]; then
        print_status "Current infrastructure status:"
        $TERRAFORM_CMD show
    else
        print_warning "No infrastructure deployed"
    fi
}

# Main script logic
main() {
    echo "FocusHive Calendar Integration - Infrastructure Deployment"
    echo "========================================================"
    echo ""
    
    case "${1:-deploy}" in
        "deploy")
            check_prerequisites
            init_terraform
            plan_deployment
            apply_deployment
            extract_outputs
            show_manual_steps
            ;;
        "plan")
            check_prerequisites
            init_terraform
            plan_deployment
            ;;
        "apply")
            check_prerequisites
            init_terraform
            apply_deployment
            extract_outputs
            show_manual_steps
            ;;
        "destroy")
            destroy_infrastructure
            ;;
        "status")
            show_status
            ;;
        "init")
            init_terraform
            ;;
        *)
            echo "Usage: $0 [deploy|plan|apply|destroy|status|init]"
            echo ""
            echo "Commands:"
            echo "  deploy  - Full deployment (plan + apply)"
            echo "  plan    - Show deployment plan"
            echo "  apply   - Apply planned changes"
            echo "  destroy - Destroy infrastructure"
            echo "  status  - Show current status"
            echo "  init    - Initialize Terraform"
            echo ""
            echo "Default: deploy"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"